@model DocumentManager.Web.Models.GenerateProgressViewModel

@{
    ViewData["Title"] = "Генерация документа";
}

<div class="card">
    <div class="card-header">
        <h4>Генерация документа</h4>
    </div>
    <div class="card-body">
        <div class="text-center mb-4">
            <h5 id="status-text">Инициализация...</h5>
        </div>

        <div class="progress mb-4">
            <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
        </div>

        <div id="error-container" class="alert alert-danger d-none">
            <h5>Произошла ошибка при генерации документа</h5>
            <p id="error-message"></p>
        </div>

        <div id="success-container" class="alert alert-success d-none">
            <h5>Документ успешно сгенерирован</h5>
            <p id="success-message">Документ готов к скачиванию.</p>
        </div>

        <div class="text-center mt-4">
            <a id="download-btn" href="@Url.Action("Download", new { id = Model.DocumentId })" class="btn btn-primary btn-lg d-none">
                <i class="bi bi-download"></i> Скачать документ
            </a>
            <a id="download-all-btn" href="@Url.Action("DownloadAll", new { id = Model.DocumentId })" class="btn btn-success btn-lg d-none ms-2">
                <i class="bi bi-file-earmark-zip"></i> Скачать пакетом
            </a>
            <partial name="_BackButton" model='new BackButtonModel {
    FallbackUrl = Url.Action("Details", "Documents", new { id = Model.DocumentId }),
    ButtonText = "Вернуться к документу",
    ButtonClass = "btn btn-secondary btn-lg ms-2"
}' />

        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Функция для обновления прогресса
        function updateProgress() {
            fetch('/api/progress/@Model.OperationId')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Ошибка при получении прогресса');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Получены данные прогресса:", data);
                    
                    // Обновляем прогресс-бар
                    const progressBar = document.getElementById('progress-bar');
                    progressBar.style.width = data.progress + '%';
                    progressBar.setAttribute('aria-valuenow', data.progress);
                    progressBar.textContent = data.progress + '%';

                    // Обновляем статус
                    document.getElementById('status-text').textContent = data.status;

                    // Если есть ошибка
                    if (data.isError) {
                        document.getElementById('error-container').classList.remove('d-none');
                        document.getElementById('error-message').textContent = data.status;
                        progressBar.classList.remove('progress-bar-animated', 'bg-primary');
                        progressBar.classList.add('bg-danger');
                        clearInterval(interval);
                        return;
                    }

                    // Если операция завершена
                    if (data.isCompleted) {
                        document.getElementById('success-container').classList.remove('d-none');
                        document.getElementById('download-btn').classList.remove('d-none');
                        progressBar.classList.remove('progress-bar-animated');

                        // Проверяем, содержит ли статус информацию о пакете документов
                        if (data.status && data.status.includes('пакет')) {
                            document.getElementById('success-message').textContent = 
                                'Сгенерировано несколько документов. Вы можете скачать их по отдельности или пакетом.';
                            document.getElementById('download-all-btn').classList.remove('d-none');
                            console.log("Показываем кнопку пакетной загрузки");
                        }

                        // Если есть URL для скачивания
                        if (data.result) {
                            const downloadUrl = data.result.startsWith('/') ? data.result : '/' + data.result;
                            document.getElementById('download-btn').href = downloadUrl;
                            console.log("Установлен URL скачивания:", downloadUrl);

                            // Обновляем URL для пакетной загрузки, если он содержит Download
                            if (downloadUrl.includes('/Download/')) {
                                const downloadAllUrl = downloadUrl.replace('/Download/', '/DownloadAll/');
                                document.getElementById('download-all-btn').href = downloadAllUrl;
                                console.log("Установлен URL пакетной загрузки:", downloadAllUrl);
                            }
                        }

                        clearInterval(interval);
                        return;
                    }

                    // Если прогресс достиг 100%, но операция не завершена
                    if (data.progress >= 100) {
                        progressBar.classList.add('bg-warning');
                        document.getElementById('status-text').textContent = 'Ожидание завершения...';
                    }
                })
                .catch(error => {
                    console.error('Ошибка:', error);
                    document.getElementById('error-container').classList.remove('d-none');
                    document.getElementById('error-message').textContent = error.message;
                    clearInterval(interval);
                });
        }

        // Запускаем обновление прогресса каждую секунду
        let interval = setInterval(updateProgress, 1000);

        // Вызываем обновление сразу
        updateProgress();
    </script>
}