@model DocumentManager.Web.Models.DocumentFormViewModel

@{
    ViewData["Title"] = "Создание документа";
}

@if (Model.IsFactoryNumberDuplicate)
{
    <!-- Модальное окно для подтверждения дубликата -->
    <div class="modal fade" id="duplicateNumberModal" tabindex="-1" role="dialog" aria-labelledby="duplicateNumberModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-warning">
                    <h5 class="modal-title" id="duplicateNumberModalLabel">
                        <i class="bi bi-exclamation-triangle"></i> Дубликат заводского номера
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Заводской номер <strong>@Model.FactoryNumber</strong> уже существует.</p>
                    <p>Вы уверены, что хотите создать документ с таким же заводским номером?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Изменить номер</button>
                    <button type="submit" class="btn btn-warning" name="confirmDuplicate" value="true" form="documentForm">Да, создать дубликат</button>
                </div>

            </div>
        </div>
    </div>

    <!-- Скрытое поле для подтверждения дубликата -->
    <input type="hidden" id="confirmDuplicateInput" name="confirmDuplicate" value="false" />
}

<style>
    .form-card {
        border: none;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.04);
        margin-bottom: 1.5rem;
    }

        .form-card .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #eee;
            padding: 1rem 1.5rem;
        }

        .form-card .card-title {
            display: flex;
            align-items: center;
            margin-bottom: 0;
            font-weight: 600;
        }

            .form-card .card-title i {
                margin-right: 0.75rem;
                color: #3a7bd5;
            }

    /* Исправление проблемы с длинными названиями в формах */
    .form-floating label {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        width: 90%; /* Не даем тексту выходить за пределы */
        pointer-events: none; /* Чтобы тултип работал корректно */
    }

    /* Добавляем тултип для длинных названий */
    .form-field-container {
        position: relative;
        margin-bottom: 1rem;
    }

    /* Группы полей */
    .fields-group {
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #f0f0f0;
    }

    .fields-group-title {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 1.25rem;
        color: #3a7bd5;
        padding-bottom: 0.5rem;
        border-bottom: 1px dashed #e9ecef;
    }

    /* Чекбоксы для связанных документов */
    .related-templates-list .form-check {
        padding-left: 1.75rem;
        margin-bottom: 1rem;
    }

    .related-templates-list .form-check-input {
        margin-top: 0.3rem;
    }

    .related-templates-list .form-check-label {
        display: flex;
        flex-direction: column;
    }

    /* Кнопки действий */
    .action-buttons {
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid #eee;
    }

        .action-buttons .btn {
            font-weight: 500;
            padding: 0.5rem 1.5rem;
        }

    /* Улучшенный стиль для полей с ошибками */
    .form-field-container.has-error .form-floating {
        position: relative;
        border-left: 3px solid #dc3545;
        padding-left: 0.5rem;
    }

    .is-invalid {
        box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
    }

    .invalid-feedback {
        font-weight: 500;
        font-size: 0.9rem;
    }

    /* Стили для модального окна */
    #duplicateNumberModal .modal-body {
        font-size: 1.1rem;
    }

        #duplicateNumberModal .modal-body strong {
            color: #dc3545;
        }
</style>

<div class="row mb-4">
    <div class="col-lg-8">
        <h1 class="display-6 mb-0">
            <i class="bi bi-file-earmark-plus text-primary me-2"></i> Создание документа
        </h1>
        <p class="text-muted mt-2">@Model.TemplateName</p>
    </div>
    <div class="col-lg-4 text-lg-end mt-3 mt-lg-0">
        <a href="@Url.Action("Create", "Documents")" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Назад к выбору шаблона
        </a>
    </div>
</div>

<form asp-action="CreateForm" method="post" id="documentForm">
    <input type="hidden" name="templateId" value="@Model.TemplateId" />

    <div class="row">
        <!-- Левая колонка - Основные поля -->
        <div class="col-md-8">
            <div class="card form-card mb-4">
                <div class="card-header">
                    <h5 class="card-title">
                        <i class="bi bi-pencil-square"></i> Данные документа
                    </h5>
                </div>
                <div class="card-body">
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger mb-4">
                            <div asp-validation-summary="ModelOnly" class="mb-0"></div>
                        </div>
                    }

                    <!-- Группируем поля по категориям -->
                    @{
                        // Важные поля (заводской номер и основные параметры)
                        var primaryFields = Model.Fields.Where(f => f.FieldName == "FactoryNumber" || f.IsUnique || f.FieldName.Contains("Number")).ToList();

                        // Поля с датами
                        var dateFields = Model.Fields.Where(f => f.FieldType == "date").ToList();

                        // Остальные поля
                        var otherFields = Model.Fields.Except(primaryFields).Except(dateFields).ToList();
                    }

                    @if (primaryFields.Any())
                    {
                        <div class="fields-group">
                            <h6 class="fields-group-title">Основные параметры</h6>
                            <div class="row g-3">
                                @foreach (var field in primaryFields)
                                {
                                    <div class="col-md-6">
                                        <div class="form-field-container @(ViewData.ModelState[field.FieldName]?.Errors.Count > 0 ? "has-error" : "")" title="@field.FieldLabel">
                                            <div class="form-floating">
                                                @{
                                                    bool hasError = ViewData.ModelState[field.FieldName]?.Errors.Count > 0;
                                                    string cssClass = hasError ? "form-control is-invalid" : "form-control";
                                                }

                                                @if (field.FieldType == "select" && field.Options.Any())
                                                {
                                                    <select name="fieldValues[@field.FieldName]" id="@field.FieldName" class="@cssClass">
                                                        <option value="">-- Выберите --</option>
                                                        @foreach (var option in field.Options)
                                                        {
                                                            if (option == field.Value)
                                                            {
                                                                <option value="@option" selected>@option</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="@option">@option</option>
                                                            }
                                                        }
                                                    </select>
                                                }
                                                else
                                                {
                                                    <input type="text"
                                                           name="fieldValues[@field.FieldName]"
                                                           id="@field.FieldName"
                                                           class="@cssClass"
                                                           value="@field.Value"
                                                           required="@field.IsRequired"
                                                           placeholder="@field.FieldLabel" />
                                                }

                                                <label for="@field.FieldName" class="@(hasError ? "text-danger" : "")">
                                                    @field.FieldLabel @(field.IsRequired ? "*" : "")
                                                </label>

                                                @if (hasError)
                                                {
                                                    <div class="invalid-feedback">
                                                        @ViewData.ModelState[field.FieldName].Errors.First().ErrorMessage
                                                    </div>
                                                    <div class="alert alert-danger mt-2">
                                                        @ViewData.ModelState[field.FieldName].Errors.First().ErrorMessage
                                                    </div>
                                                }

                                                @if (field.IsUnique)
                                                {
                                                    <div class="form-text small">Должно быть уникальным</div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    @if (dateFields.Any())
                    {
                        <div class="fields-group">
                            <h6 class="fields-group-title">Даты</h6>
                            <div class="row g-3">
                                @foreach (var field in dateFields)
                                {
                                    <div class="col-md-6">
                                        <div class="form-field-container @(ViewData.ModelState[field.FieldName]?.Errors.Count > 0 ? "has-error" : "")" title="@field.FieldLabel">
                                            <div class="form-floating">
                                                @{
                                                    bool hasError = ViewData.ModelState[field.FieldName]?.Errors.Count > 0;
                                                    string cssClass = hasError ? "form-control is-invalid" : "form-control";
                                                }

                                                <input type="date"
                                                       name="fieldValues[@field.FieldName]"
                                                       id="@field.FieldName"
                                                       class="@cssClass"
                                                       value="@field.Value"
                                                       required="@field.IsRequired"
                                                       placeholder="@field.FieldLabel" />

                                                <label for="@field.FieldName" class="@(hasError ? "text-danger" : "")">
                                                    @field.FieldLabel @(field.IsRequired ? "*" : "")
                                                </label>

                                                @if (hasError)
                                                {
                                                    <div class="invalid-feedback">
                                                        @ViewData.ModelState[field.FieldName].Errors.First().ErrorMessage
                                                    </div>
                                                    <div class="alert alert-danger mt-2">
                                                        @ViewData.ModelState[field.FieldName].Errors.First().ErrorMessage
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    @if (otherFields.Any())
                    {
                        <div class="fields-group mb-0 border-bottom-0 pb-0">
                            <h6 class="fields-group-title">Дополнительная информация</h6>
                            <div class="row g-3">
                                @foreach (var field in otherFields)
                                {
                                    <div class="col-md-6">
                                        <div class="form-field-container @(ViewData.ModelState[field.FieldName]?.Errors.Count > 0 ? "has-error" : "")" title="@field.FieldLabel">
                                            <div class="form-floating">
                                                @{
                                                    bool hasError = ViewData.ModelState[field.FieldName]?.Errors.Count > 0;
                                                    string cssClass = hasError ? "form-control is-invalid" : "form-control";
                                                }

                                                @if (field.FieldType == "select" && field.Options.Any())
                                                {
                                                    <select name="fieldValues[@field.FieldName]" id="@field.FieldName" class="@cssClass">
                                                        <option value="">-- Выберите --</option>
                                                        @foreach (var option in field.Options)
                                                        {
                                                            if (option == field.Value)
                                                            {
                                                                <option value="@option" selected>@option</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="@option">@option</option>
                                                            }
                                                        }
                                                    </select>
                                                }
                                                else
                                                {
                                                    <input type="text"
                                                           name="fieldValues[@field.FieldName]"
                                                           id="@field.FieldName"
                                                           class="@cssClass"
                                                           value="@field.Value"
                                                           required="@field.IsRequired"
                                                           placeholder="@field.FieldLabel" />
                                                }

                                                <label for="@field.FieldName" class="@(hasError ? "text-danger" : "")">
                                                    @field.FieldLabel @(field.IsRequired ? "*" : "")
                                                </label>

                                                @if (hasError)
                                                {
                                                    <div class="invalid-feedback">
                                                        @ViewData.ModelState[field.FieldName].Errors.First().ErrorMessage
                                                    </div>
                                                    <div class="alert alert-danger mt-2">
                                                        @ViewData.ModelState[field.FieldName].Errors.First().ErrorMessage
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Правая колонка - Связанные документы -->
        <div class="col-md-4">
            <div class="card form-card">
                <div class="card-header">
                    <h5 class="card-title">
                        <i class="bi bi-diagram-3"></i> Связанные документы
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.RelatedTemplates != null && Model.RelatedTemplates.Any())
                    {
                        <p>Выберите связанные документы для создания:</p>

                        <div class="related-templates-list">
                            @foreach (var relatedTemplate in Model.RelatedTemplates)
                            {
                                <div class="form-check mb-3">
                                    @if (Model.SelectedRelatedTemplateIds != null && Model.SelectedRelatedTemplateIds.Contains(relatedTemplate.Id))
                                    {
                                        <input class="form-check-input" type="checkbox" name="selectedRelatedTemplateIds" value="@relatedTemplate.Id" id="related-@relatedTemplate.Id" checked />
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="checkbox" name="selectedRelatedTemplateIds" value="@relatedTemplate.Id" id="related-@relatedTemplate.Id" />
                                    }
                                    <label class="form-check-label" for="related-@relatedTemplate.Id">
                                        <div class="fw-semibold">@relatedTemplate.Name</div>
                                        <div class="text-muted small">@relatedTemplate.GetLocalizedType() (Код: @relatedTemplate.Code)</div>
                                    </label>
                                </div>
                            }
                        </div>

                        <div class="alert alert-info mt-3 small">
                            <i class="bi bi-info-circle"></i> Отображаются только документы, логически связанные с "@Model.TemplateName".
                            Связанные документы будут созданы с тем же заводским номером.
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> Связанные документы не найдены или недоступны для данного шаблона.
                        </div>
                    }
                </div>
            </div>
        </div>


        <div class="action-buttons">
            <button type="submit" class="btn btn-primary btn-lg">
                <i class="bi bi-save me-1"></i> Создать документ
            </button>
            <partial name="_BackButton" model='new BackButtonModel {
    FallbackUrl = Url.Action("Create", "Documents"),
    ButtonText = "Отмена",
    ButtonClass = "btn btn-outline-secondary btn-lg ms-2",
    Icon = "bi-x"
}' />

        </div>
</form>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Заполнение текущей даты для полей с датами
            $('input[type="date"]').each(function () {
                const $this = $(this);
                if (!$this.val()) {
                    const today = new Date().toISOString().split('T')[0];
                    $this.val(today);
                }
            });

            // Добавление тултипов для длинных меток полей
            $('.form-field-container').tooltip({
                trigger: 'hover'
            });

            // Отладочная информация
            console.log("Страница загружена, проверка модального окна и обработчиков");

            // Показываем модальное окно, если есть дубликат заводского номера
        @if (Model.IsFactoryNumberDuplicate)
        {
            <text>
                        console.log("Показываем модальное окно дубликата");
                        var duplicateModal = new bootstrap.Modal(document.getElementById('duplicateNumberModal'));
                        duplicateModal.show();
            </text>
        }

                // Обработка подтверждения создания дубликата
                $('#confirmDuplicate').on('click', function () {
                    console.log("Нажата кнопка подтверждения дубликата");

                    // Устанавливаем значение скрытого поля
                    $('#confirmDuplicateInput').val('true');
                    console.log("Установлено значение confirmDuplicate = " + $('#confirmDuplicateInput').val());

                    // Отправляем форму
                    $('#documentForm').submit();
                });
        });
    </script>
}