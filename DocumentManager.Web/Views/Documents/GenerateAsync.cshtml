@model DocumentManager.Web.Models.GenerateProgressViewModel

@{
    ViewData["Title"] = "Генерация документа";
}

<div class="container-fluid px-0">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-white py-3">
                    <div class="d-flex align-items-center">
                        <div class="progress-icon me-3">
                            <div class="spinner-container">
                                <div id="progress-spinner" class="spinner-border text-primary" role="status"></div>
                                <div id="progress-check" class="check-icon d-none">
                                    <i class="bi bi-check-circle-fill text-success fs-3"></i>
                                </div>
                                <div id="progress-error" class="error-icon d-none">
                                    <i class="bi bi-exclamation-circle-fill text-danger fs-3"></i>
                                </div>
                            </div>
                        </div>
                        <div>
                            <h4 class="card-title mb-0" id="status-title">Генерация документа</h4>
                            <p class="text-muted mb-0" id="status-subtitle">Пожалуйста, подождите пока документ генерируется</p>
                        </div>
                    </div>
                </div>
                <div class="card-body p-4">
                    <div class="progress-details mb-4">
                        <div class="progress-steps">
                            <div class="progress-step active" id="step-1">
                                <div class="step-icon">
                                    <i class="bi bi-1-circle-fill"></i>
                                </div>
                                <div class="step-content">
                                    <h6 class="step-title">Загрузка документа</h6>
                                    <p class="step-desc">Загрузка данных из базы данных</p>
                                </div>
                            </div>
                            <div class="progress-step" id="step-2">
                                <div class="step-icon">
                                    <i class="bi bi-2-circle"></i>
                                </div>
                                <div class="step-content">
                                    <h6 class="step-title">Подготовка шаблона</h6>
                                    <p class="step-desc">Загрузка и подготовка шаблона документа</p>
                                </div>
                            </div>
                            <div class="progress-step" id="step-3">
                                <div class="step-icon">
                                    <i class="bi bi-3-circle"></i>
                                </div>
                                <div class="step-content">
                                    <h6 class="step-title">Генерация документа</h6>
                                    <p class="step-desc">Заполнение данных в шаблоне</p>
                                </div>
                            </div>
                            <div class="progress-step" id="step-4">
                                <div class="step-icon">
                                    <i class="bi bi-4-circle"></i>
                                </div>
                                <div class="step-content">
                                    <h6 class="step-title">Сохранение</h6>
                                    <p class="step-desc">Сохранение сгенерированного документа</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="progress mb-4" style="height: 10px;">
                        <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated"
                             role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                            0%
                        </div>
                    </div>

                    <div class="status-details">
                        <div class="current-status mb-2">
                            <span class="fw-semibold">Текущий статус:</span>
                            <span id="status-text" class="ms-2">Инициализация...</span>
                        </div>
                    </div>

                    <div id="error-container" class="alert alert-danger mt-4 d-none">
                        <div class="d-flex">
                            <div class="me-3">
                                <i class="bi bi-exclamation-triangle-fill fs-3"></i>
                            </div>
                            <div>
                                <h5>Произошла ошибка при генерации документа</h5>
                                <p id="error-message" class="mb-0"></p>
                            </div>
                        </div>
                    </div>

                    <div id="success-container" class="alert alert-success mt-4 d-none">
                        <div class="d-flex">
                            <div class="me-3">
                                <i class="bi bi-check-circle-fill fs-3"></i>
                            </div>
                            <div>
                                <h5>Документ успешно сгенерирован</h5>
                                <p class="mb-0">Документ готов к скачиванию.</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-white py-3">
                    <div class="d-flex justify-content-between">
                        <a id="back-btn" href="@Url.Action("Details", "Documents", new { id = Model.DocumentId })" class="btn btn-outline-secondary">
                            <i class="bi bi-arrow-left"></i> Вернуться к документу
                        </a>
                        <a id="download-btn" href="@Url.Action("Download", "Documents", new { id = Model.DocumentId })" class="btn btn-primary d-none">
                            <i class="bi bi-download"></i> Скачать документ
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .progress-steps {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .progress-step {
        display: flex;
        gap: 1rem;
        opacity: 0.5;
        transition: opacity 0.3s;
    }

    .progress-step.active {
        opacity: 1;
    }

    .step-icon {
        font-size: 1.5rem;
        color: var(--primary-color);
    }

    .step-content {
        flex: 1;
    }

    .step-title {
        margin-bottom: 0.25rem;
    }

    .step-desc {
        font-size: 0.875rem;
        color: #6c757d;
        margin-bottom: 0;
    }

    .spinner-container {
        position: relative;
        width: 2rem;
        height: 2rem;
    }

    .check-icon, .error-icon {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const operationId = '@Model.OperationId';
            let interval;
            let currentProgress = 0;

            function updateProgress() {
                fetch('/api/progress/' + operationId)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Ошибка при получении прогресса');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Обновляем прогресс-бар
                        const progressBar = document.getElementById('progress-bar');
                        const animatedProgress = animateProgress(currentProgress, data.progress);
                        currentProgress = data.progress;

                        progressBar.style.width = animatedProgress + '%';
                        progressBar.setAttribute('aria-valuenow', animatedProgress);
                        progressBar.textContent = animatedProgress + '%';

                        // Обновляем статус
                        document.getElementById('status-text').textContent = data.status;

                        // Обновляем шаги
                        updateSteps(data.progress);

                        // Если есть ошибка
                        if (data.isError) {
                            document.getElementById('error-container').classList.remove('d-none');
                            document.getElementById('error-message').textContent = data.status;
                            document.getElementById('progress-spinner').classList.add('d-none');
                            document.getElementById('progress-error').classList.remove('d-none');
                            document.getElementById('status-title').textContent = 'Ошибка генерации';
                            document.getElementById('status-subtitle').textContent = 'Произошла ошибка при генерации документа';

                            progressBar.classList.remove('progress-bar-animated', 'bg-primary');
                            progressBar.classList.add('bg-danger');

                            clearInterval(interval);
                            return;
                        }

                        // Если операция завершена
                        if (data.isCompleted) {
                            document.getElementById('success-container').classList.remove('d-none');
                            document.getElementById('download-btn').classList.remove('d-none');
                            document.getElementById('progress-spinner').classList.add('d-none');
                            document.getElementById('progress-check').classList.remove('d-none');
                            document.getElementById('status-title').textContent = 'Генерация завершена';
                            document.getElementById('status-subtitle').textContent = 'Документ успешно сгенерирован';

                            progressBar.classList.remove('progress-bar-animated');

                            // Если есть URL для скачивания
                            if (data.result) {
                                // Убедимся, что URL абсолютный
                                const downloadUrl = data.result.startsWith('/') ? data.result : '/' + data.result;
                                document.getElementById('download-btn').href = downloadUrl;
                                console.log('Установлен URL скачивания:', downloadUrl);
                            }

                            clearInterval(interval);
                            return;
                        }

                        // Если прогресс достиг 100%, но операция не завершена
                        if (data.progress >= 100) {
                            progressBar.classList.add('bg-warning');
                            document.getElementById('status-text').textContent = 'Ожидание завершения...';
                        }
                    })
                    .catch(error => {
                        console.error('Ошибка:', error);
                        document.getElementById('error-container').classList.remove('d-none');
                        document.getElementById('error-message').textContent = error.message;
                        clearInterval(interval);
                    });
            }

            function updateSteps(progress) {
                // Step 1: 0-10%
                // Step 2: 11-30%
                // Step 3: 31-70%
                // Step 4: 71-100%

                const step1 = document.getElementById('step-1');
                const step2 = document.getElementById('step-2');
                const step3 = document.getElementById('step-3');
                const step4 = document.getElementById('step-4');

                // Reset all steps
                [step1, step2, step3, step4].forEach(step => {
                    step.classList.remove('active');
                    const icon = step.querySelector('.bi');
                    if (icon) {
                        if (icon.classList.contains('bi-1-circle-fill')) icon.classList.replace('bi-1-circle-fill', 'bi-1-circle');
                        if (icon.classList.contains('bi-2-circle-fill')) icon.classList.replace('bi-2-circle-fill', 'bi-2-circle');
                        if (icon.classList.contains('bi-3-circle-fill')) icon.classList.replace('bi-3-circle-fill', 'bi-3-circle');
                        if (icon.classList.contains('bi-4-circle-fill')) icon.classList.replace('bi-4-circle-fill', 'bi-4-circle');
                        if (icon.classList.contains('bi-check-circle-fill')) icon.classList.replace('bi-check-circle-fill', 'bi-check-circle');
                    }
                });

                if (progress <= 10) {
                    step1.classList.add('active');
                    const icon = step1.querySelector('.bi');
                    if (icon && icon.classList.contains('bi-1-circle')) icon.classList.replace('bi-1-circle', 'bi-1-circle-fill');
                } else if (progress <= 30) {
                    step1.classList.add('active');
                    step2.classList.add('active');
                    const icon1 = step1.querySelector('.bi');
                    const icon2 = step2.querySelector('.bi');
                    if (icon1 && icon1.classList.contains('bi-1-circle')) icon1.classList.replace('bi-1-circle', 'bi-check-circle-fill');
                    if (icon2 && icon2.classList.contains('bi-2-circle')) icon2.classList.replace('bi-2-circle', 'bi-2-circle-fill');
                } else if (progress <= 70) {
                    step1.classList.add('active');
                    step2.classList.add('active');
                    step3.classList.add('active');
                    const icon1 = step1.querySelector('.bi');
                    const icon2 = step2.querySelector('.bi');
                    const icon3 = step3.querySelector('.bi');
                    if (icon1 && icon1.classList.contains('bi-1-circle')) icon1.classList.replace('bi-1-circle', 'bi-check-circle-fill');
                    if (icon2 && icon2.classList.contains('bi-2-circle')) icon2.classList.replace('bi-2-circle', 'bi-check-circle-fill');
                    if (icon3 && icon3.classList.contains('bi-3-circle')) icon3.classList.replace('bi-3-circle', 'bi-3-circle-fill');
                } else {
                    step1.classList.add('active');
                    step2.classList.add('active');
                    step3.classList.add('active');
                    step4.classList.add('active');
                    const icon1 = step1.querySelector('.bi');
                    const icon2 = step2.querySelector('.bi');
                    const icon3 = step3.querySelector('.bi');
                    const icon4 = step4.querySelector('.bi');
                    if (icon1 && icon1.classList.contains('bi-1-circle')) icon1.classList.replace('bi-1-circle', 'bi-check-circle-fill');
                    if (icon2 && icon2.classList.contains('bi-2-circle')) icon2.classList.replace('bi-2-circle', 'bi-check-circle-fill');
                    if (icon3 && icon3.classList.contains('bi-3-circle')) icon3.classList.replace('bi-3-circle', 'bi-check-circle-fill');
                    if (icon4 && icon4.classList.contains('bi-4-circle')) icon4.classList.replace('bi-4-circle', 'bi-4-circle-fill');
                }
            }

            function animateProgress(startValue, endValue) {
                // Simple linear interpolation for this example
                // In a real application, you might want to use a smoother easing function
                return Math.min(startValue + 5, endValue);
            }

            // Запускаем обновление прогресса каждую секунду
            interval = setInterval(updateProgress, 1000);

            // Вызываем обновление сразу
            updateProgress();
        });
    </script>
}