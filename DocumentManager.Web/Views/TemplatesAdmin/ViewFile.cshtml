@model DocumentManager.Web.Models.FileViewModel

@{
    ViewData["Title"] = "Редактирование файла";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Редактирование файла: @Model.FileName</h1>
    <div>
        <partial name="_BackButton" model='new BackButtonModel {
    FallbackUrl = Url.Action("Files", "TemplatesAdmin"),
    ButtonText = "Назад к файлам"
}' />
    </div>
</div>

<div class="card">
    <div class="card-header bg-light">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <strong>Путь:</strong> @Model.FilePath
            </div>
            <div>
                <strong>Тип:</strong> @(Model.FileType == "json" ? "JSON-схема" : "Шаблон Word")
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (Model.FileType == "json")
        {
            <form asp-action="SaveFile" method="post">
                <input type="hidden" name="type" value="@Model.FileType" />
                <input type="hidden" name="path" value="@Model.FilePath" />

                <div class="form-group mb-3">
                    <div id="jsonEditor" style="height: 500px; width: 100%;"></div>
                    <textarea name="content" id="jsonContent" class="d-none">@Model.Content</textarea>
                </div>

                <div class="form-group d-flex justify-content-between">
                    <div>
                        <button type="button" id="formatJsonBtn" class="btn btn-outline-secondary">
                            <i class="bi bi-code"></i> Форматировать JSON
                        </button>
                        <button type="button" id="validateJsonBtn" class="btn btn-outline-primary ms-2">
                            <i class="bi bi-check-circle"></i> Проверить JSON
                        </button>
                    </div>
                    <div>
                        <button type="submit" id="saveJsonBtn" class="btn btn-success">
                            <i class="bi bi-save"></i> Сохранить изменения
                        </button>
                    </div>
                </div>

                <div id="validationResult" class="mt-3"></div>
            </form>
        }
        else
        {
            <pre class="border p-3 bg-light" style="max-height: 500px; overflow: auto;">@Model.Content</pre>
        }
    </div>
</div>

@section Scripts {
    @if (Model.FileType == "json")
    {
        <link href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/editor/editor.main.min.css" rel="stylesheet">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/loader.min.js"></script>
        <script>
            require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs' } });
            require(['vs/editor/editor.main'], function () {
                // Создаем редактор
                var editor = monaco.editor.create(document.getElementById('jsonEditor'), {
                    value: document.getElementById('jsonContent').value,
                    language: 'json',
                    theme: 'vs-light',
                    automaticLayout: true,
                    minimap: { enabled: true },
                    lineNumbers: 'on',
                    scrollBeyondLastLine: false,
                    roundedSelection: true,
                    autoIndent: 'full'
                });

                // Синхронизируем содержимое редактора с скрытым полем при отправке формы
                document.getElementById('saveJsonBtn').addEventListener('click', function () {
                    document.getElementById('jsonContent').value = editor.getValue();
                });

                // Форматирование JSON
                document.getElementById('formatJsonBtn').addEventListener('click', function () {
                    try {
                        const jsonObj = JSON.parse(editor.getValue());
                        const formatted = JSON.stringify(jsonObj, null, 4);
                        editor.setValue(formatted);
                        showValidationResult('JSON успешно отформатирован', 'success');
                    } catch (e) {
                        showValidationResult('Ошибка форматирования: ' + e.message, 'danger');
                    }
                });

                // Валидация JSON
                document.getElementById('validateJsonBtn').addEventListener('click', function () {
                    try {
                        const jsonObj = JSON.parse(editor.getValue());

                        // Проверка наличия обязательных полей для шаблона
                        let errors = [];

                        if (!jsonObj.id) errors.push('Отсутствует обязательное поле "id"');
                        if (!jsonObj.name) errors.push('Отсутствует обязательное поле "name"');
                        if (!jsonObj.templatePath) errors.push('Отсутствует обязательное поле "templatePath"');

                        if (!jsonObj.fields || !Array.isArray(jsonObj.fields) || jsonObj.fields.length === 0) {
                            errors.push('Отсутствует массив полей "fields" или массив пуст');
                        } else {
                            // Проверка полей
                            jsonObj.fields.forEach((field, index) => {
                                if (!field.fieldName)
                                    errors.push(`Поле #${index + 1}: отсутствует обязательное свойство "fieldName"`);
                                if (!field.fieldLabel)
                                    errors.push(`Поле "${field.fieldName || '#' + (index + 1)}": отсутствует обязательное свойство "fieldLabel"`);
                                if (!field.fieldType)
                                    errors.push(`Поле "${field.fieldName || '#' + (index + 1)}": отсутствует обязательное свойство "fieldType"`);
                            });
                        }

                        if (errors.length === 0) {
                            showValidationResult('JSON валиден и содержит все необходимые поля', 'success');
                        } else {
                            showValidationResult('Найдены ошибки: <ul>' + errors.map(e => `<li>${e}</li>`).join('') + '</ul>', 'warning');
                        }
                    } catch (e) {
                        showValidationResult('Ошибка валидации JSON: ' + e.message, 'danger');
                    }
                });

                function showValidationResult(message, type) {
                    const resultEl = document.getElementById('validationResult');
                    resultEl.innerHTML = `<div class="alert alert-${type}">${message}</div>`;

                    // Автоматически скрыть сообщение через 5 секунд
                    if (type === 'success') {
                        setTimeout(() => {
                            resultEl.innerHTML = '';
                        }, 5000);
                    }
                }
            });
        </script>
    }
}